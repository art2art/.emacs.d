(add-to-list 'load-path "~/.emacs.d/el-get/haskell-mode")
(load "~/.emacs.d/el-get/haskell-mode/haskell-site-file.el")

(require 'haskell-checkers)

(add-to-list 'auto-mode-alist '("\\.hsc$" . haskell-mode))
(autoload 'ghc-init "ghc" nil t)

(custom-set-variables
 '(haskell-program-name "ghci")
 '(inferior-haskell-wait-and-jump t)
 '(hs-lint-replace-with-suggestions t) ;
 '(haskell-process-type 'cabal-dev)
 '(haskell-notify-p t)
 '(haskell-tags-on-save t)
 '(haskell-stylish-on-save t)
 )

(defun art/haskell-mode-hook ()
  (ghc-init)
  (flymake-mode)
  (turn-on-haskell-doc-mode)
  (turn-on-haskell-ghci)
  (turn-on-eldoc-mode)
;  (turn-on-haskell-indent)
  (turn-on-haskell-indentation)
;  (turn-on-haskell-simple-indent)
  (local-set-key [return] 'newline-and-indent)
  (local-set-key "\C-cl" 'hs-lint)
  (local-set-key "\C-ch" 'haskell-hoogle)
  (local-set-key "\C-c\C-h" 'haskell-hayoo)
  (setq tab-width 4)
  (setq haskell-font-lock-symbols t)
  (add-to-list 'ac-sources 'ac-source-ghc-mod)
  )

(require 'haskell-interactive-mode)

(defun art/hs-interactive-hook ()
  (local-set-key (kbd "C-<up>")
                 '(lambda () (haskell-interactive-mode-history-toggle 1)))
  (local-set-key (kbd "C-<down>")
                 '(lambda () (haskell-interactive-mode-history-toggle -1)))
  )

;; (defun haskell-hook ()
;;   (turn-on-haskell-simple-indent)
;;   (define-key haskell-mode-map (kbd "<return>") 'haskell-simple-indent-newline-same-col)
;;   (define-key haskell-mode-map (kbd "C-<return>") 'haskell-simple-indent-newline-indent)
;;   (define-key haskell-mode-map [?\C-c ?\C-l] 'haskell-process-load-file)
;;   (define-key haskell-mode-map [f5] 'haskell-process-load-file)
;;   (define-key haskell-mode-map [?\C-c ?\C-z] 'haskell-interactive-switch)
;;   (define-key haskell-mode-map (kbd "C-`") 'haskell-interactive-bring)
;;   (define-key haskell-mode-map (kbd "C-c C-c") 'haskell-process-cabal-build)
;;   (define-key haskell-mode-map (kbd "C-c c") 'haskell-process-cabal)
;;   (define-key haskell-mode-map (kbd "C-c C-t") 'haskell-process-do-type)
;;   (define-key haskell-mode-map (kbd "C-c C-i") 'haskell-process-do-info)
;;   (define-key haskell-mode-map (kbd "SPC") 'haskell-mode-contextual-space)
;;   (define-key haskell-mode-map [f8] 'haskell-navigate-imports)
;;   (define-key haskell-mode-map (kbd "M-.") 'haskell-mode-tag-find)
;;   (define-key haskell-mode-map (kbd "C-x C-s") 'haskell-mode-save-buffer)
;;   (define-key haskell-mode-map (kbd "C-<right>")
;;     (lambda ()
;;       (interactive)
;;       (haskell-move-nested 1)))
;;   (define-key haskell-mode-map (kbd "C-<left>")
;;     (lambda ()
;;       (interactive)
;;       (haskell-move-nested -1))))

(defun haskell-cabal-hook ()
  (define-key haskell-cabal-mode-map (kbd "C-c C-c") 'haskell-process-cabal-build)
  (define-key haskell-cabal-mode-map (kbd "C-c c") 'haskell-process-cabal)
  (define-key haskell-cabal-mode-map (kbd "C-`") 'haskell-interactive-bring)
  (define-key haskell-cabal-mode-map [?\C-c ?\C-z] 'haskell-interactive-switch))

(add-hook 'haskell-mode-hook 'art/haskell-mode-hook)
(add-hook 'haskell-interactive-mode-hook 'art/hs-interactive-hook)
(add-hook 'haskell-cabal-mode-hook 'haskell-cabal-hook)
;(add-hook 'haskell-mode-hook 'haskell-hook)
